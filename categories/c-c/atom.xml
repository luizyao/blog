<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title>Luiz&#x27;s Blog - C&#x2F;C++</title>
    <link rel="self" type="application/atom+xml" href="https://luizyao.github.io/blog/categories/c-c/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://luizyao.github.io/blog/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-05T00:00:00+00:00</updated>
    <id>https://luizyao.github.io/blog/categories/c-c/atom.xml</id>
    <entry xml:lang="zh-CN">
        <title>C 语言中结构体的内存布局</title>
        <published>2025-08-05T00:00:00+00:00</published>
        <updated>2025-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://luizyao.github.io/blog/the-struct-memory-layout/"/>
        <id>https://luizyao.github.io/blog/the-struct-memory-layout/</id>
        
        <summary type="html">&lt;p&gt;C 语言中结构体（struct）的内存布局和编译器具体的实现有关，但遵循一般规则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;结构体中各成员在内存中的存储顺序和它们的声明顺序一致。&lt;&#x2F;li&gt;
&lt;li&gt;为了提高内存的访问速度，编译器可能会在各成员间添加填充字节（也可能在结构体之后，但不会出现在结构体开始的位置）。&lt;&#x2F;li&gt;
&lt;li&gt;结构体按照成员的最大内存占用字节数做对齐。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</summary>
        
    </entry>
</feed>
